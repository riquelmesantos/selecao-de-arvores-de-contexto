if(any(deltas[irmaos_w]> limiar)) C[w] <- 1
}
else if(any(C[filhos_w] == 1)) C[w] <- 1
}
arvore <- names(C[C==1])
arvore
C
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
filhos_w <- intersect(filhos(w, alfabeto), nos)
if(length(filhos_w) == 0) {
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(any(deltas[irmaos_w]> limiar)) C[w] <- 1
}
}
arvore <- names(C[C==1])
C
filhos(w, alfabeto)
length(filhos_w) == 0
filhos(w, alfabeto)
deltas
deltas>0.12
irmaos(w, alfabeto)
w
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- irmaos(w, alfabeto)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- irmaos(w, alfabeto)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
arvore <- names(C[C==1])
C
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- irmaos(w, alfabeto)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[w] <- 1
}
}
if(any(deltas[irmaos_w] > limiar)) C[w] <- 1
}
arvore <- names(C[C==1])
C
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
print(w)
filhos_w <- filhos(w, alfabeto)
irmaos_w <- irmaos(w, alfabeto)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
arvore <- names(C[C==1])
C
names(deltas)
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
print(w)
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
arvore <- names(C[C==1])
arvore
C
w <- '0'
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
C[w] == 1
filhos_w
filhos_w <- filhos(w, alfabeto)
filhos_w
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
irmaos_w
all(filhos_w %in% nos)
all(C[filhos_w] == 0)
rev(nos)
all(C[filhos_w] == 0)
nos <- setdiff(nos, '0')
nos
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
C
filhos_w
all(filhos_w %in% nos)
names(deltas)
w
w <- 0
all(filhos_w %in% nos)
filhos_w
w <- '0'
filhos_w <- filhos(w, alfabeto)
filhos_w
all(filhos_w %in% nos)
all(C[filhos_w] == 0)
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
else next
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
arvore <- names(C[C==1])
arvore
w
C[w] == 1
C[w] <- 0
C[w] == 1
filhos_w <- filhos(w, alfabeto)
filhos_w
irmaos_w
all(filhos_w %in% nos)
all(C[filhos_w] == 0)
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
else next
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
arvore <- names(C[C==1])
arvore
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
print(w)
next
}
else next
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
arvore <- names(C[C==1])
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 0)){
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
else next
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
print(w)
}
arvore <- names(C[C==1])
nos
arvore
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)) next
else{
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
print(w)
}
arvore <- names(C[C==1])
arvore
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
print(w)
}
arvore <- names(C[C==1])
arvore
tau_g_deltas <- function(deltas, alfabeto, limiar) {
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
print(w)
}
arvore <- names(C[C==1])
arvore
}
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
print(w)
}
arvore <- names(C[C==1])
arvore
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
}
arvore <- names(C[C==1])
arvore
names(deltas)
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
print(w)
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) {
C[irmaos_w] <- 1
print(w)}
}
arvore <- names(C[C==1])
arvore
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
print(w)
if(any(deltas[irmaos_w] > limiar)) C[irmaos_w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) {
C[irmaos_w] <- 1
print(w)}
}
arvore <- names(C[C==1])
arvore
rev(nos)
C
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
if(any(deltas[irmaos_w] > limiar)){
C[irmaos_w] <- 1
next
}
}
}
if(any(deltas[irmaos_w] > limiar)) {
C[irmaos_w] <- 1
print(w)}
}
arvore <- names(C[C==1])
arvore
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
if(any(deltas[irmaos_w] > limiar)){
C[irmaos_w] <- 1
print(w)
next
}
}
}
if(any(deltas[irmaos_w] > limiar)) {
C[irmaos_w] <- 1
print(w)
}
}
arvore <-
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)){
print(w)
next
}
else{
if(any(deltas[irmaos_w] > limiar)){
C[w] <- 1
print(w)
next
}
}
}
if(any(deltas[irmaos_w] > limiar)) {
C[w] <- 1
print(w)
}
}
arvore <- names(C[C==1])
arvore
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)) next
else if(any(deltas[irmaos_w] > limiar)){
C[w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) C[w] <- 1
}
arvore <- names(C[C==1])
arvore
tau_g_deltas <- function(deltas, alfabeto, limiar) {
nos <- names(deltas)
# Inicializa a função indicadora para cada nó
C <- setNames(rep(0, length(nos)), nos)
for(w in rev(nos)){
if(C[w] == 1) next
filhos_w <- filhos(w, alfabeto)
irmaos_w <- intersect(irmaos(w, alfabeto), nos)
if(all(filhos_w %in% nos)){
if(all(C[filhos_w] == 1)) next
else if(any(deltas[irmaos_w] > limiar)){
C[w] <- 1
next
}
}
if(any(deltas[irmaos_w] > limiar)) C[w] <- 1
}
arvore <- names(C[C==1])
# Retorna a árvore selecionada e as probabilidades suavizadas associadas
return(arvore)
}
constantes <- 1:10/10
acertos_1_contantes <- matrix(0, nrow = length(constantes), ncol = length(tau_1_galves), dimnames = list('c=' %s+% constantes, names(tau_1_galves)))
for(constante in constantes){
acertos_1_reteste <- matrix(0, nrow = 100, ncol = length(tau_1_galves), dimnames = list(1:100, names(tau_1_galves)))
alfabeto <- c('0', '1')
for(tamanho in names(tau_1_galves)){
for(i in 1:100){
n <- as.numeric(stri_sub(tamanho, from=3))
limiar <- constante * log(n)
deltas <- tau_1_galves[[tamanho]][[i]]$deltas
arvore_nova <- tau_g_deltas(deltas, alfabeto, constante)
acertos_1_reteste[i, tamanho] <- as.integer(setequal(arvore_nova, tau_1))
}
}
acertos_1_contantes['c='%s+%constante,] <- colSums(acertos_1_reteste)
print('c='%s+%constante)
print(acertos_1_contantes['c='%s+%constante,])
}
